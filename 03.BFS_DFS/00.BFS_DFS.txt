DFS/BFS

DFS(Depth First Search)
깊이우선탐색

 하나의 경우의 수에 대해 모든 경우의 수를 조사하고
 다음 경우의 수를 조사하면서 해를 찾는 과정

 모든 노드들을 방문할 때 사용

 DFS와 스택
 상위레벨 검사
 정답이 아닌경우 가장 가까운 항목순서로 하위항목을 스택에 적재
 하위항목들을 위에서 하나씩 꺼내어 검사
 정답을 찾을 때까지 반복

 미로찾기
  미로를 탐색하는 것처럼 한 방향으로 끝까지 가다
  가장 가까운 갈림길로 탐색을 진행하는 방법
  
	      Y	0 1 2 3 4 5
	
	X START	0 0 0 0 0 0
	1	1 0 1 1 1 0
	2	0 0 1 0 1 0
	3	0 1 1 0 0 0
	4	0 0 1 1 1 1
	5	1 0 0 0 0 0 FINISH
	
	검사좌표	스택적재좌표	결과
	(0, 0)	(0, 1)		False
	(0, 1)	(1, 1), (0, 2)	False
	(0, 2)	(1, 1), (0, 3)	False
	(0, 3)	(1, 1), (0, 4)	False
	(0, 4)	(1, 1), (0, 5)	False
	(0, 5)	(1, 1), (1, 5)	False
	(1, 5)	(1, 1), (2, 5)	False
	(2, 5)	(1, 1), (3, 5)	False
	(3, 5)	(1, 1), (3, 4)	False
	(3, 4)	(1, 1), (3, 3)	False
	(3, 3)	(1, 1), (2, 3)	False
	(2, 3)	(1, 1)		False	
	(1, 1)	(2, 1)		False
	(2, 1)	(2, 0)		False
	...	...		...
	(5, 3)	(5, 4)		False
	(5, 4)	(5, 5)		False
	(5, 5)	True		False
	True	-		True


	while len(stakc)>0:
	  now=stack.pop()
	  if now==destination:
	    return True
	  x=now[1]
	  y=now[0]
	  if x-1>-1:
	    if maps[y][x-1]==1:
	      stack.appent([y, x-1])
	      maps[y][x-1]='check'
	  if x+1<hori:
	    if maps[y][x+1]==1:
	      stack.appent([y, x+1])
	      maps[y][x+1]='check'
	  if y-1>-1:
	    if maps[y-1][x]==1:
	      stack.appent([y-1, x])
	      maps[y-1][x]='check'
	  if y+1>verti:
	    if maps[y+1][x]==1:
	      stack.appent([y+1, x])
	      maps[y+1][x]='check'
	return False



BFS(Breadth First Search)
너비우선탐색

 하나의 경우의 수에 대한 다음 단계의 모든 경우의 수를 조사하면서 해를 찾는 과정
 시작지점으로부터 가까운 지점을 먼저 방문
 멀리 떨어진 지점을 나중에 방문하는 순회방법

 두 노드 사이의 최단 경로 또는 임의의 경로를 찾을 때 사용

 DFS와 큐
 상위레벨 검사
 정답이 아닌경우 다음레벨의 모든 항목을 순서대로 큐에 적재
 먼저 들어간 항목부터 순서대로 검사
 정답을 찾을 때까지 반복

 최단경로찾기

	while len(queue)>0:
	  count=len(queue)
	  for time in range(count):
	    now=queue.pop(0)
	    if now==dest:
	      return answer
	    for i in data:
	      if i[0]==now and visited[i[1]-1]==False:
	        queue.append(i[1])
	        visited[i[1]-1]=True
	      else i[1]==now and visited[i[0]-1]==False:
	        queue.append(i[0])
	        visited[i[0]-1]=True
	  answer+=1
	return answer
  
