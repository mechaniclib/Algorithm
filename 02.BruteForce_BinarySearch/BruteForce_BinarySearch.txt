2. 완전탐색/이분탐색

탐색
많은 양의 데이터 속에서 원하는 데이터를 찾는(Searching) 알고리즘
웹에서 특정 문자를 가진 웹 문서를 찾거나 신용카드, 버스카드 등의 데이터 검색 알고리즘으로 사용

탐색의 종류
완전탐색, 이분탐색, 깊이우선탐색, 너비우선탐색, 문자열탐색, KMP, BM



완전탐색(Brute-Force)
 
 가능한 모든 경우의 수를 하나씩 실행하여 원하는 값을 찾는 알고리즘
 컴퓨터의 빠른 계산성능활용
 배열의 순서와 상관없이 결과가 확실하고 예측가능
 시간이 가장 오래걸리는 탐색방법(최저효율)

 완전탐색구조
 list : 1, 2, 3, ..., N
 process : check 1; check 2; check 3; ...; check x; finish;
  
 구현방법
 
  반복문
   시작부터 순차적으로 확인
   def solution(index):
    for i in range(len(index)):
     if index[i] == x:
      return i
       
  재귀함수
   동적계획법
   백트래킹
   탐욕알고리즘
   
   def Brute_Force(list, loc):
    if list[loc] == x:
     return loc
    else:
     return Brute_Force(list, loc+1)



 이분탐색(Binary Search)
 
  데이터가 오름차순으로 정렬된 배열에서 특정한 값의 위치를 찾는 알고리즘
  정렬된 상태의 배열에서 중간을 선택해 목표값과 비교하여 찾는 방법
  X와 비교
  X가 중간 값보다 작으면 중간 값을 기준으로 좌측의 데이터들을 대상으로
  X가 중간값보다 크면 배열의 우축을 대상으로 재확인 하면서 해당값을 탐색
  
  이분탐색구조
  order list : left - mid[(left+right)/2] - right
  process : mid < x; left(mid + 1); mid > x; right(mid - 1); ...; mid = x; finish;
  
  구현방법
  def Binary_Search(list):
   left = 0
   right = len(list)-1
   while(left<=right):
    mid = (left+right)//2
    if list[mid] == 8:
     return mid
    elif list[mid] < 8:
     left = mid + 1
    elif list[mid] > 8:
     right = mid - 1
   return mid
